# -*- coding: utf-8 -*-
"""K-meansPatternLAb.ipynb

Automatically generated by Colaboratory.



**Experiment 5**

**Name: "Implementing K Means CLustering"**

**Submitted By:**

**Name: Susmoy Chakraborty**

**ID: 15-02-04-114**

**Section: B**

**Group: B2**

**Submission Date: 9-10-2019**

**IDE: Colab notebook**
"""

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

#importing all header files

import pandas as pd
import numpy as np

from matplotlib import pyplot as plt

df = pd.read_csv("data.txt", delimiter =" ",header=None, names=['x','y'])

df

"""**Take input from the given source data file and plot all the points**"""

plt.scatter(np.array(df['x']),np.array(df['y']), color='g')

plt.show()

k = int(input("Enter the value of k:"))

initialCentroid = np.array(df.sample(k))

initialCentroid

#distances =[]

for i in range(200):
  distances =[]
  print(initialCentroid)  
  for i1 in range(len(df)):
      
      x =[]
      for i2 in range(k):

        x.append((df['x'][i1] - initialCentroid[i2][0])**2 +  (df['y'][i1] - initialCentroid[i2][1])**2) 

      distances.append(x)
  rk =[]
    
  for j in range(len(distances)):
       rk.append(distances[j].index(min(distances[j])))   


  df_temp = pd.DataFrame({'x': df['x'],
                           'y': df['y'],
                             'cname':rk})

  df_temp1 = df_temp.sort_values('cname')
  ee =list(np.unique( df_temp1['cname']))
  tt =[]
  for m in range(len(ee)):
    c =[]
    nn = ee[m]
    for j1 in range(len(df_temp1)):
         if df_temp1['cname'][j1]== nn:
                 c.append([df_temp1['x'][j1],df_temp1['y'][j1]])

    tt.append(c)
  centro = []
  for i7 in range(len(tt)):
      centro.append(np.mean(tt[i7],axis =0))
  initialCentroid = np.array(centro)

len(tt)

"""*matplotlib.colors*
**b : blue.**
**g : green.**
**r : red.**
**c : cyan.**
**m : magenta.**
**y : yellow.**
**k : black.**
**w : white.**
"""

colors =['r','g','b','c','m','k','w','y']

colors[0]

for i in range(k): #k = len(tt)
   for j in range(len(tt[i])):
       plt.scatter(tt[i][j][0], tt[i][j][1], color= colors[i])

plt.show()
