# -*- coding: utf-8 -*-
"""online-knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1stdBmIQoNvty4GIAK-uL4Bec7TTGHius
"""

import pandas as pd
import numpy as np

from matplotlib import pyplot as plt

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

df_train = pd.read_csv("Data_csv.csv", delimiter =",")

df_test = pd.read_csv("test_csv.txt", delimiter =",",names =['x','y','classname'])

x_class1=[]
x_class2 =[]
y_class1 =[]
y_class2 =[]

for i in range(len(df_train)):
    if df_train['Class'][i]==1:
        x_class1.append(df_train['Feature1'][i])
        y_class1.append(df_train['Feature2'][i])
    else:
        x_class2.append(df_train['Feature1'][i])
        y_class2.append(df_train['Feature2'][i])

plt.scatter(x_class1,y_class1, color='r',marker='o',label='class 1')

plt.scatter(x_class2,y_class2, color='g',marker='+',label='class 2')

     
        
plt.legend()
plt.show()

k = int(input("Enter the value of k: "))

eu_distance_test =[]

eu_distance_test_class =[]
 
for i in range(len(df_test)):
    distance_list=[]
    for j in range(len(df_train)):
      f = ((df_train['Feature1'][j] - df_test['x'][i])**2) +  ((df_train['Feature2'][j] - df_test['y'][i])**2)
      distance_list.append(f)
    df_temp = pd.DataFrame({'distance': distance_list,
                           'classname': df_train['Class'] })
    df_temp1 =(df_temp.sort_values('distance')).head(k)
    #print(np.array(df_temp1['distance']))
    eu_distance_test.append(np.array(df_temp1['distance']))
    #print(np.array(df_temp1['classname']))
    eu_distance_test_class.append(np.array(df_temp1['classname']))

eu_distance_test1 =np.array(eu_distance_test)
eu_distance_test_class1 =np.array(eu_distance_test_class)

test_labels =[]


for i in range(len(eu_distance_test_class1)):
  count1 =0
  count2 =0
  h = eu_distance_test_class1[i]
  for j in range(len(h)):
    if (h[j]== 1):
       count1 = count1 +1
    else:
      count2 = count2 +1
  if count1> count2:
    test_labels.append(1)
  else:
    test_labels.append(2)

test_labels

test_x_class1 =[]

test_x_class2 =[]
test_y_class1 =[]
test_y_class2 =[]






for i in range(len(df_test)):
    if test_labels[i]==1:
        test_x_class1.append(df_test['x'][i])
        test_y_class1.append(df_test['y'][i])
    else:
        test_x_class2.append(df_test['x'][i])
        test_y_class2.append(df_test['y'][i])

plt.axis([0, 13, 0, 13])
plt.scatter(x_class1,y_class1, color='r',marker='o',label='class 1')
plt.scatter(test_x_class1,test_y_class1, color='b',marker='o',label='class 1')


plt.scatter(x_class2,y_class2, color='g',marker='+',label='class 2')
plt.scatter(test_x_class2,test_y_class2, color='b',marker='+',label='class 2')
     
        
plt.legend()
plt.show()

f1 = open('prediction11.txt','a')


for i in range(len(df_test)): 
  ss = "test point:"+str(df_test['x'][i])+','+str(df_test['y'][i])+'\n'
  f1.write(ss)
  for i1 in range(len(eu_distance_test1[i])):
    ds = "Distance "+str(i1+1 )+": "+ str(eu_distance_test1[i][i1])+"      "+"class:"+str(eu_distance_test_class1[i][i1])+'\n'
    f1.write(ds)
  dss = "Predicted class: "+ str(test_labels[i])
  f1.write(dss)
  f1.write("\n")

actual_labels = df_test['classname'].values

actual_labels

FN =0

for i in range(len(actual_labels)):
  
  if actual_labels[i]!= test_labels[i] ==2:
    FN = FN+1

test_labels

TP =0

for i in range(len(actual_labels)):
  
  if actual_labels[i]== test_labels[i] `==1:
    TP = TP+1



TN =0

for i in range(len(actual_labels)):
  
  if actual_labels[i]== test_labels[i]==2:
    TN = TN+1

FP =0

for i in range(len(actual_labels)):
  
  if actual_labels[i]!= test_labels[i]==1:
    FP = FP+1

TN =0

for i in range(len(actual_labels)):
  
  if actual_labels[i]== test_labels[i]==2:
    TN = TN+1

recall = TP/(TP+FN)

prec = TP/(TP+FP)